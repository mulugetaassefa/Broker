{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react\\\\project\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport api, { apiInstance } from '../services/api';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Set the auth token\n          apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // Fetch user data\n          const response = await api.auth.me();\n          setUser(response.data);\n        }\n      } catch (err) {\n        console.error('Auth check failed:', err);\n        localStorage.removeItem('token');\n        delete apiInstance.defaults.headers.common['Authorization'];\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      var _location$state, _location$state$from;\n      setError(null);\n      console.log('Attempting login with:', {\n        email\n      });\n      const response = await api.auth.login({\n        email,\n        password\n      });\n      console.log('Login response:', response);\n\n      // Handle different response formats\n      let token, user;\n\n      // Case 1: Standard axios response with data property\n      if (response && response.data) {\n        // Case 1a: { data: { token, user } }\n        if (response.data.token && response.data.user) {\n          token = response.data.token;\n          user = response.data.user;\n        }\n        // Case 1b: { data: { data: { token, user } } } (nested data)\n        else if (response.data.data && response.data.data.token) {\n          token = response.data.data.token;\n          user = response.data.data.user;\n        }\n      }\n      // Case 2: Direct response { token, user }\n      else if (response && response.token) {\n        token = response.token;\n        user = response.user;\n      }\n      console.log('Extracted token and user:', {\n        token,\n        user\n      });\n      if (!token || !user) {\n        console.error('Could not extract token and user from response:', response);\n        throw new Error('Invalid response format from server');\n      }\n      localStorage.setItem('token', token);\n      apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setUser(user);\n\n      // Redirect to the intended page or dashboard based on user role\n      const to = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || (user.role === 'admin' ? '/admin' : '/dashboard');\n      navigate(to, {\n        replace: true\n      });\n      toast.success('Logged in successfully!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Login error:', err);\n      let errorMessage = 'Login failed. Please try again.';\n      if (err.response) {\n        var _err$response$data, _err$response$data2, _err$response$data2$e, _err$response$data3;\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage = ((_err$response$data = err.response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || ((_err$response$data2 = err.response.data) === null || _err$response$data2 === void 0 ? void 0 : (_err$response$data2$e = _err$response$data2.error) === null || _err$response$data2$e === void 0 ? void 0 : _err$response$data2$e.message) || ((_err$response$data3 = err.response.data) === null || _err$response$data3 === void 0 ? void 0 : _err$response$data3.error) || `Server error: ${err.response.status}`;\n      } else if (err.request) {\n        // The request was made but no response was received\n        errorMessage = 'No response from server. Please check your connection.';\n      } else if (err.message) {\n        // Something happened in setting up the request\n        errorMessage = err.message;\n      }\n      console.error('Login failed:', errorMessage);\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete apiInstance.defaults.headers.common['Authorization'];\n    setUser(null);\n    toast.success('Logged out successfully!');\n    navigate('/login');\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setError(null);\n      const response = await api.auth.register(userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (err) {\n      var _err$response, _err$response$data4;\n      const error = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data4 = _err$response.data) === null || _err$response$data4 === void 0 ? void 0 : _err$response$data4.message) || 'Registration failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Update profile\n  const updateProfile = async userData => {\n    try {\n      const response = await api.auth.updateProfile(userData);\n      setUser(response.data);\n      toast.success('Profile updated successfully!');\n      return {\n        success: true,\n        user: response.data\n      };\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const error = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Update failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await api.auth.changePassword({\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const error = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Password change failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      await api.auth.forgotPassword(email);\n      toast.success('Password reset link sent to your email');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const error = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Password reset request failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, password) => {\n    try {\n      await api.auth.resetPassword(token, {\n        password\n      });\n      toast.success('Password reset successful. Please login with your new password.');\n      navigate('/login');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const error = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Password reset failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Check if user is admin\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  const value = {\n    user,\n    loading,\n    error,\n    isAdmin,\n    login,\n    logout,\n    register,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"Ir0O4uDvM0NuI5XjcKWqs1T5vIg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","useLocation","api","apiInstance","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","navigate","location","checkAuth","token","localStorage","getItem","defaults","headers","common","response","auth","me","data","err","console","removeItem","login","email","password","_location$state","_location$state$from","log","Error","setItem","to","state","from","pathname","role","replace","success","errorMessage","_err$response$data","_err$response$data2","_err$response$data2$e","_err$response$data3","message","status","request","logout","register","userData","_err$response","_err$response$data4","updateProfile","_err$response2","_err$response2$data","changePassword","currentPassword","newPassword","_err$response3","_err$response3$data","forgotPassword","_err$response4","_err$response4$data","resetPassword","_err$response5","_err$response5$data","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/project/react/project/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport api, { apiInstance } from '../services/api';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          // Set the auth token\r\n          apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          \r\n          // Fetch user data\r\n          const response = await api.auth.me();\r\n          setUser(response.data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Auth check failed:', err);\r\n        localStorage.removeItem('token');\r\n        delete apiInstance.defaults.headers.common['Authorization'];\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      console.log('Attempting login with:', { email });\r\n      const response = await api.auth.login({ email, password });\r\n      console.log('Login response:', response);\r\n      \r\n      // Handle different response formats\r\n      let token, user;\r\n      \r\n      // Case 1: Standard axios response with data property\r\n      if (response && response.data) {\r\n        // Case 1a: { data: { token, user } }\r\n        if (response.data.token && response.data.user) {\r\n          token = response.data.token;\r\n          user = response.data.user;\r\n        }\r\n        // Case 1b: { data: { data: { token, user } } } (nested data)\r\n        else if (response.data.data && response.data.data.token) {\r\n          token = response.data.data.token;\r\n          user = response.data.data.user;\r\n        }\r\n      }\r\n      // Case 2: Direct response { token, user }\r\n      else if (response && response.token) {\r\n        token = response.token;\r\n        user = response.user;\r\n      }\r\n      \r\n      console.log('Extracted token and user:', { token, user });\r\n      \r\n      if (!token || !user) {\r\n        console.error('Could not extract token and user from response:', response);\r\n        throw new Error('Invalid response format from server');\r\n      }\r\n      \r\n      localStorage.setItem('token', token);\r\n      apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      setUser(user);\r\n      \r\n      // Redirect to the intended page or dashboard based on user role\r\n      const to = location.state?.from?.pathname || \r\n                (user.role === 'admin' ? '/admin' : '/dashboard');\r\n      navigate(to, { replace: true });\r\n      \r\n      toast.success('Logged in successfully!');\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      let errorMessage = 'Login failed. Please try again.';\r\n      \r\n      if (err.response) {\r\n        // The request was made and the server responded with a status code\r\n        // that falls out of the range of 2xx\r\n        errorMessage = err.response.data?.message || \r\n                      err.response.data?.error?.message ||\r\n                      err.response.data?.error ||\r\n                      `Server error: ${err.response.status}`;\r\n      } else if (err.request) {\r\n        // The request was made but no response was received\r\n        errorMessage = 'No response from server. Please check your connection.';\r\n      } else if (err.message) {\r\n        // Something happened in setting up the request\r\n        errorMessage = err.message;\r\n      }\r\n      \r\n      console.error('Login failed:', errorMessage);\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete apiInstance.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    toast.success('Logged out successfully!');\r\n    navigate('/login');\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.auth.register(userData);\r\n      return { success: true, data: response.data };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Registration failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Update profile\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const response = await api.auth.updateProfile(userData);\r\n      setUser(response.data);\r\n      toast.success('Profile updated successfully!');\r\n      return { success: true, user: response.data };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Update failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await api.auth.changePassword({ currentPassword, newPassword });\r\n      toast.success('Password changed successfully!');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password change failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.auth.forgotPassword(email);\r\n      toast.success('Password reset link sent to your email');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password reset request failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (token, password) => {\r\n    try {\r\n      await api.auth.resetPassword(token, { password });\r\n      toast.success('Password reset successful. Please login with your new password.');\r\n      navigate('/login');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password reset failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    isAdmin,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n    resetPassword,\r\n    setError\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,GAAG,IAAIC,WAAW,QAAQ,iBAAiB;AAClD,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASY,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMoB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACd,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACT;UACAjB,WAAW,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;;UAExE;UACA,MAAMM,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,IAAI,CAACC,EAAE,CAAC,CAAC;UACpChB,OAAO,CAACc,QAAQ,CAACG,IAAI,CAAC;QACxB;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAAChB,KAAK,CAAC,oBAAoB,EAAEe,GAAG,CAAC;QACxCT,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;QAChC,OAAO7B,WAAW,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;MAC7D,CAAC,SAAS;QACRX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMc,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACFrB,QAAQ,CAAC,IAAI,CAAC;MACde,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAE;QAAEJ;MAAM,CAAC,CAAC;MAChD,MAAMR,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,IAAI,CAACM,KAAK,CAAC;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC1DJ,OAAO,CAACO,GAAG,CAAC,iBAAiB,EAAEZ,QAAQ,CAAC;;MAExC;MACA,IAAIN,KAAK,EAAET,IAAI;;MAEf;MACA,IAAIe,QAAQ,IAAIA,QAAQ,CAACG,IAAI,EAAE;QAC7B;QACA,IAAIH,QAAQ,CAACG,IAAI,CAACT,KAAK,IAAIM,QAAQ,CAACG,IAAI,CAAClB,IAAI,EAAE;UAC7CS,KAAK,GAAGM,QAAQ,CAACG,IAAI,CAACT,KAAK;UAC3BT,IAAI,GAAGe,QAAQ,CAACG,IAAI,CAAClB,IAAI;QAC3B;QACA;QAAA,KACK,IAAIe,QAAQ,CAACG,IAAI,CAACA,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACT,KAAK,EAAE;UACvDA,KAAK,GAAGM,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACT,KAAK;UAChCT,IAAI,GAAGe,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAClB,IAAI;QAChC;MACF;MACA;MAAA,KACK,IAAIe,QAAQ,IAAIA,QAAQ,CAACN,KAAK,EAAE;QACnCA,KAAK,GAAGM,QAAQ,CAACN,KAAK;QACtBT,IAAI,GAAGe,QAAQ,CAACf,IAAI;MACtB;MAEAoB,OAAO,CAACO,GAAG,CAAC,2BAA2B,EAAE;QAAElB,KAAK;QAAET;MAAK,CAAC,CAAC;MAEzD,IAAI,CAACS,KAAK,IAAI,CAACT,IAAI,EAAE;QACnBoB,OAAO,CAAChB,KAAK,CAAC,iDAAiD,EAAEW,QAAQ,CAAC;QAC1E,MAAM,IAAIa,KAAK,CAAC,qCAAqC,CAAC;MACxD;MAEAlB,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEpB,KAAK,CAAC;MACpCjB,WAAW,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;MAExER,OAAO,CAACD,IAAI,CAAC;;MAEb;MACA,MAAM8B,EAAE,GAAG,EAAAL,eAAA,GAAAlB,QAAQ,CAACwB,KAAK,cAAAN,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBO,IAAI,cAAAN,oBAAA,uBAApBA,oBAAA,CAAsBO,QAAQ,MAC9BjC,IAAI,CAACkC,IAAI,KAAK,OAAO,GAAG,QAAQ,GAAG,YAAY,CAAC;MAC3D5B,QAAQ,CAACwB,EAAE,EAAE;QAAEK,OAAO,EAAE;MAAK,CAAC,CAAC;MAE/B1C,KAAK,CAAC2C,OAAO,CAAC,yBAAyB,CAAC;MACxC,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOjB,GAAG,EAAE;MACZC,OAAO,CAAChB,KAAK,CAAC,cAAc,EAAEe,GAAG,CAAC;MAClC,IAAIkB,YAAY,GAAG,iCAAiC;MAEpD,IAAIlB,GAAG,CAACJ,QAAQ,EAAE;QAAA,IAAAuB,kBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,mBAAA;QAChB;QACA;QACAJ,YAAY,GAAG,EAAAC,kBAAA,GAAAnB,GAAG,CAACJ,QAAQ,CAACG,IAAI,cAAAoB,kBAAA,uBAAjBA,kBAAA,CAAmBI,OAAO,OAAAH,mBAAA,GAC3BpB,GAAG,CAACJ,QAAQ,CAACG,IAAI,cAAAqB,mBAAA,wBAAAC,qBAAA,GAAjBD,mBAAA,CAAmBnC,KAAK,cAAAoC,qBAAA,uBAAxBA,qBAAA,CAA0BE,OAAO,OAAAD,mBAAA,GACjCtB,GAAG,CAACJ,QAAQ,CAACG,IAAI,cAAAuB,mBAAA,uBAAjBA,mBAAA,CAAmBrC,KAAK,KACxB,iBAAiBe,GAAG,CAACJ,QAAQ,CAAC4B,MAAM,EAAE;MACtD,CAAC,MAAM,IAAIxB,GAAG,CAACyB,OAAO,EAAE;QACtB;QACAP,YAAY,GAAG,wDAAwD;MACzE,CAAC,MAAM,IAAIlB,GAAG,CAACuB,OAAO,EAAE;QACtB;QACAL,YAAY,GAAGlB,GAAG,CAACuB,OAAO;MAC5B;MAEAtB,OAAO,CAAChB,KAAK,CAAC,eAAe,EAAEiC,YAAY,CAAC;MAC5ChC,QAAQ,CAACgC,YAAY,CAAC;MACtB5C,KAAK,CAACW,KAAK,CAACiC,YAAY,CAAC;MACzB,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEhC,KAAK,EAAEiC;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBnC,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO7B,WAAW,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IAC3Db,OAAO,CAAC,IAAI,CAAC;IACbR,KAAK,CAAC2C,OAAO,CAAC,0BAA0B,CAAC;IACzC9B,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMwC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF1C,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMU,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,IAAI,CAAC8B,QAAQ,CAACC,QAAQ,CAAC;MAClD,OAAO;QAAEX,OAAO,EAAE,IAAI;QAAElB,IAAI,EAAEH,QAAQ,CAACG;MAAK,CAAC;IAC/C,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAA6B,aAAA,EAAAC,mBAAA;MACZ,MAAM7C,KAAK,GAAG,EAAA4C,aAAA,GAAA7B,GAAG,CAACJ,QAAQ,cAAAiC,aAAA,wBAAAC,mBAAA,GAAZD,aAAA,CAAc9B,IAAI,cAAA+B,mBAAA,uBAAlBA,mBAAA,CAAoBP,OAAO,KAAI,qBAAqB;MAClErC,QAAQ,CAACD,KAAK,CAAC;MACfX,KAAK,CAACW,KAAK,CAACA,KAAK,CAAC;MAClB,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC;MAAM,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM8C,aAAa,GAAG,MAAOH,QAAQ,IAAK;IACxC,IAAI;MACF,MAAMhC,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,IAAI,CAACkC,aAAa,CAACH,QAAQ,CAAC;MACvD9C,OAAO,CAACc,QAAQ,CAACG,IAAI,CAAC;MACtBzB,KAAK,CAAC2C,OAAO,CAAC,+BAA+B,CAAC;MAC9C,OAAO;QAAEA,OAAO,EAAE,IAAI;QAAEpC,IAAI,EAAEe,QAAQ,CAACG;MAAK,CAAC;IAC/C,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgC,cAAA,EAAAC,mBAAA;MACZ,MAAMhD,KAAK,GAAG,EAAA+C,cAAA,GAAAhC,GAAG,CAACJ,QAAQ,cAAAoC,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcjC,IAAI,cAAAkC,mBAAA,uBAAlBA,mBAAA,CAAoBV,OAAO,KAAI,eAAe;MAC5DrC,QAAQ,CAACD,KAAK,CAAC;MACfX,KAAK,CAACW,KAAK,CAACA,KAAK,CAAC;MAClB,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC;MAAM,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMiD,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEC,WAAW,KAAK;IAC7D,IAAI;MACF,MAAMhE,GAAG,CAACyB,IAAI,CAACqC,cAAc,CAAC;QAAEC,eAAe;QAAEC;MAAY,CAAC,CAAC;MAC/D9D,KAAK,CAAC2C,OAAO,CAAC,gCAAgC,CAAC;MAC/C,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOjB,GAAG,EAAE;MAAA,IAAAqC,cAAA,EAAAC,mBAAA;MACZ,MAAMrD,KAAK,GAAG,EAAAoD,cAAA,GAAArC,GAAG,CAACJ,QAAQ,cAAAyC,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAActC,IAAI,cAAAuC,mBAAA,uBAAlBA,mBAAA,CAAoBf,OAAO,KAAI,wBAAwB;MACrErC,QAAQ,CAACD,KAAK,CAAC;MACfX,KAAK,CAACW,KAAK,CAACA,KAAK,CAAC;MAClB,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC;MAAM,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMsD,cAAc,GAAG,MAAOnC,KAAK,IAAK;IACtC,IAAI;MACF,MAAMhC,GAAG,CAACyB,IAAI,CAAC0C,cAAc,CAACnC,KAAK,CAAC;MACpC9B,KAAK,CAAC2C,OAAO,CAAC,wCAAwC,CAAC;MACvD,OAAO;QAAEA,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOjB,GAAG,EAAE;MAAA,IAAAwC,cAAA,EAAAC,mBAAA;MACZ,MAAMxD,KAAK,GAAG,EAAAuD,cAAA,GAAAxC,GAAG,CAACJ,QAAQ,cAAA4C,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAczC,IAAI,cAAA0C,mBAAA,uBAAlBA,mBAAA,CAAoBlB,OAAO,KAAI,+BAA+B;MAC5ErC,QAAQ,CAACD,KAAK,CAAC;MACfX,KAAK,CAACW,KAAK,CAACA,KAAK,CAAC;MAClB,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC;MAAM,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMyD,aAAa,GAAG,MAAAA,CAAOpD,KAAK,EAAEe,QAAQ,KAAK;IAC/C,IAAI;MACF,MAAMjC,GAAG,CAACyB,IAAI,CAAC6C,aAAa,CAACpD,KAAK,EAAE;QAAEe;MAAS,CAAC,CAAC;MACjD/B,KAAK,CAAC2C,OAAO,CAAC,iEAAiE,CAAC;MAChF9B,QAAQ,CAAC,QAAQ,CAAC;MAClB,OAAO;QAAE8B,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOjB,GAAG,EAAE;MAAA,IAAA2C,cAAA,EAAAC,mBAAA;MACZ,MAAM3D,KAAK,GAAG,EAAA0D,cAAA,GAAA3C,GAAG,CAACJ,QAAQ,cAAA+C,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc5C,IAAI,cAAA6C,mBAAA,uBAAlBA,mBAAA,CAAoBrB,OAAO,KAAI,uBAAuB;MACpErC,QAAQ,CAACD,KAAK,CAAC;MACfX,KAAK,CAACW,KAAK,CAACA,KAAK,CAAC;MAClB,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC;MAAM,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM4D,OAAO,GAAG,CAAAhE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkC,IAAI,MAAK,OAAO;EAEtC,MAAM+B,KAAK,GAAG;IACZjE,IAAI;IACJE,OAAO;IACPE,KAAK;IACL4D,OAAO;IACP1C,KAAK;IACLuB,MAAM;IACNC,QAAQ;IACRI,aAAa;IACbG,cAAc;IACdK,cAAc;IACdG,aAAa;IACbxD;EACF,CAAC;EAED,oBAAOV,OAAA,CAACC,WAAW,CAACsE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnE,QAAA,EAAEA;EAAQ;IAAAqE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E;AAACvE,EAAA,CA/MeF,YAAY;EAAA,QAITR,WAAW,EACXC,WAAW;AAAA;AAAAiF,EAAA,GALd1E,YAAY;AAiN5B,OAAO,SAAS2E,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOrF,UAAU,CAACQ,WAAW,CAAC;AAChC;AAAC6E,GAAA,CAFeD,OAAO;AAIvB,eAAe5E,WAAW;AAAC,IAAA2E,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}