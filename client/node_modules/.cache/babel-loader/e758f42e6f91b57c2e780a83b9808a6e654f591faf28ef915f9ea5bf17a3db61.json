{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react\\\\project\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport api, { apiInstance } from '../services/api';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Set the auth token\n          apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // Fetch user data\n          const response = await api.auth.me();\n          setUser(response.data);\n        }\n      } catch (err) {\n        console.error('Auth check failed:', err);\n        localStorage.removeItem('token');\n        delete apiInstance.defaults.headers.common['Authorization'];\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      var _location$state, _location$state$from;\n      setError(null);\n      const response = await api.auth.login({\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setUser(user);\n\n      // Redirect to the intended page or dashboard\n      const to = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || '/dashboard';\n      navigate(to, {\n        replace: true\n      });\n      toast.success('Logged in successfully!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const error = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete apiInstance.defaults.headers.common['Authorization'];\n    setUser(null);\n    toast.success('Logged out successfully!');\n    navigate('/login');\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setError(null);\n      const response = await api.auth.register(userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const error = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Update profile\n  const updateProfile = async userData => {\n    try {\n      const response = await api.auth.updateProfile(userData);\n      setUser(response.data);\n      toast.success('Profile updated successfully!');\n      return {\n        success: true,\n        user: response.data\n      };\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const error = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Update failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await api.auth.changePassword({\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const error = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Password change failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      await api.auth.forgotPassword(email);\n      toast.success('Password reset link sent to your email');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const error = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Password reset request failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, password) => {\n    try {\n      await api.auth.resetPassword(token, {\n        password\n      });\n      toast.success('Password reset successful. Please login with your new password.');\n      navigate('/login');\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      const error = ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Password reset failed';\n      setError(error);\n      toast.error(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n\n  // Check if user is admin\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  const value = {\n    user,\n    loading,\n    error,\n    isAdmin,\n    login,\n    logout,\n    register,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"Ir0O4uDvM0NuI5XjcKWqs1T5vIg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","useLocation","api","apiInstance","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","navigate","location","checkAuth","token","localStorage","getItem","defaults","headers","common","response","auth","me","data","err","console","removeItem","login","email","password","_location$state","_location$state$from","setItem","to","state","from","pathname","replace","success","_err$response","_err$response$data","message","logout","register","userData","_err$response2","_err$response2$data","updateProfile","_err$response3","_err$response3$data","changePassword","currentPassword","newPassword","_err$response4","_err$response4$data","forgotPassword","_err$response5","_err$response5$data","resetPassword","_err$response6","_err$response6$data","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/project/react/project/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport api, { apiInstance } from '../services/api';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          // Set the auth token\r\n          apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          \r\n          // Fetch user data\r\n          const response = await api.auth.me();\r\n          setUser(response.data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Auth check failed:', err);\r\n        localStorage.removeItem('token');\r\n        delete apiInstance.defaults.headers.common['Authorization'];\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.auth.login({ email, password });\r\n      const { token, user } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      apiInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      setUser(user);\r\n      \r\n      // Redirect to the intended page or dashboard\r\n      const to = location.state?.from?.pathname || '/dashboard';\r\n      navigate(to, { replace: true });\r\n      \r\n      toast.success('Logged in successfully!');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Login failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete apiInstance.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    toast.success('Logged out successfully!');\r\n    navigate('/login');\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.auth.register(userData);\r\n      return { success: true, data: response.data };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Registration failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Update profile\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const response = await api.auth.updateProfile(userData);\r\n      setUser(response.data);\r\n      toast.success('Profile updated successfully!');\r\n      return { success: true, user: response.data };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Update failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await api.auth.changePassword({ currentPassword, newPassword });\r\n      toast.success('Password changed successfully!');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password change failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.auth.forgotPassword(email);\r\n      toast.success('Password reset link sent to your email');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password reset request failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (token, password) => {\r\n    try {\r\n      await api.auth.resetPassword(token, { password });\r\n      toast.success('Password reset successful. Please login with your new password.');\r\n      navigate('/login');\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = err.response?.data?.message || 'Password reset failed';\r\n      setError(error);\r\n      toast.error(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    isAdmin,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n    resetPassword,\r\n    setError\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}