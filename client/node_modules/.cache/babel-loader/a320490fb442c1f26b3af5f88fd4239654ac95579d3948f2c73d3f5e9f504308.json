{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react\\\\project\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          const {\n            data\n          } = await api.get('/auth/me');\n          setUser(data.user);\n        }\n      } catch (error) {\n        console.error('Failed to load user', error);\n        localStorage.removeItem('token');\n        delete api.defaults.headers.common['Authorization'];\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (identifier, password) => {\n    try {\n      var _location$state, _location$state$from;\n      const {\n        data\n      } = await api.post('/auth/login', {\n        identifier,\n        password\n      });\n      if (!data || !data.token || !data.user) {\n        throw new Error('Invalid response from server');\n      }\n      const {\n        token,\n        user\n      } = data;\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Make sure we have all required user fields\n      const userData = {\n        id: user.id || user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        role: user.role || 'user',\n        userType: user.userType\n      };\n      setUser(userData);\n      toast.success('Logged in successfully!');\n\n      // Redirect based on user role\n      const redirectTo = userData.role === 'admin' ? '/admin/dashboard' : '/dashboard';\n      const from = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname;\n      navigate(from || redirectTo, {\n        replace: true\n      });\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.error('Login error:', error);\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please check your credentials and try again.';\n      const errors = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors) || [];\n\n      // If there are field-specific errors, include them in the error object\n      if (errors.length > 0) {\n        const fieldErrors = errors.reduce((acc, err) => ({\n          ...acc,\n          [err.path || err.param]: err.msg || err.message\n        }), {});\n        throw {\n          message,\n          errors: fieldErrors\n        };\n      }\n      throw {\n        message: error.message || 'An error occurred during login',\n        errors: []\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      const {\n        data\n      } = await api.post('/auth/register', userData);\n      const {\n        token,\n        user\n      } = data;\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setUser(user);\n      toast.success('Registration successful!');\n\n      // Redirect based on user role\n      let redirectTo = '/dashboard'; // Default dashboard for regular users\n      if (user.role === 'admin') {\n        redirectTo = '/admin/dashboard'; // Admin dashboard\n      }\n      navigate(redirectTo, {\n        replace: true\n      }); // Always replace history for registration\n\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed. Please try again.';\n      const errors = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.errors) || [];\n      toast.error(message);\n      throw {\n        message,\n        errors\n      }; // Throw the full error object\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n    toast.success('Logged out successfully!');\n    navigate('/login');\n  };\n\n  // Update user profile\n  const updateProfile = async userData => {\n    try {\n      const {\n        data\n      } = await api.put('/auth/me', userData);\n      setUser(data.user);\n      toast.success('Profile updated successfully!');\n      return data.user;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update profile';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return true;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to change password';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      await api.post('/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset link sent to your email');\n      return true;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      const message = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to send reset email';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      await api.post(`/auth/reset-password/${token}`, {\n        newPassword\n      });\n      toast.success('Password reset successful. Please login with your new password.');\n      navigate('/login');\n      return true;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      const message = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to reset password';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    if (!user) return false;\n    return user.role === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    if (!user) return false;\n    return roles.includes(user.role);\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin',\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    hasRole,\n    hasAnyRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"VVuhODWcOIbpSDedBD8fuoocTYc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","useNavigate","useLocation","toast","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","location","loadUser","token","localStorage","getItem","defaults","headers","common","data","get","error","console","removeItem","login","identifier","password","_location$state","_location$state$from","post","Error","setItem","userData","id","_id","email","firstName","lastName","phone","role","userType","success","redirectTo","from","state","pathname","replace","_error$response","_error$response$data","_error$response2","_error$response2$data","message","response","errors","length","fieldErrors","reduce","acc","err","path","param","msg","register","_error$response3","_error$response3$data","_error$response4","_error$response4$data","logout","updateProfile","put","_error$response5","_error$response5$data","changePassword","currentPassword","newPassword","_error$response6","_error$response6$data","forgotPassword","_error$response7","_error$response7$data","resetPassword","_error$response8","_error$response8$data","hasRole","hasAnyRole","roles","includes","value","isAuthenticated","isAdmin","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["D:/project/react/project/client/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { toast } from 'react-hot-toast';\r\nimport { api } from '../services/api';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          const { data } = await api.get('/auth/me');\r\n          setUser(data.user);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load user', error);\r\n        localStorage.removeItem('token');\r\n        delete api.defaults.headers.common['Authorization'];\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (identifier, password) => {\r\n    try {\r\n      const { data } = await api.post('/auth/login', { identifier, password });\r\n      \r\n      if (!data || !data.token || !data.user) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n      \r\n      const { token, user } = data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Make sure we have all required user fields\r\n      const userData = {\r\n        id: user.id || user._id,\r\n        email: user.email,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        phone: user.phone,\r\n        role: user.role || 'user',\r\n        userType: user.userType\r\n      };\r\n      \r\n      setUser(userData);\r\n      toast.success('Logged in successfully!');\r\n      \r\n      // Redirect based on user role\r\n      const redirectTo = userData.role === 'admin' ? '/admin/dashboard' : '/dashboard';\r\n      const from = location.state?.from?.pathname;\r\n      navigate(from || redirectTo, { replace: true });\r\n      \r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      const message = error.response?.data?.message || 'Login failed. Please check your credentials and try again.';\r\n      const errors = error.response?.data?.errors || [];\r\n      \r\n      // If there are field-specific errors, include them in the error object\r\n      if (errors.length > 0) {\r\n        const fieldErrors = errors.reduce((acc, err) => ({\r\n          ...acc,\r\n          [err.path || err.param]: err.msg || err.message\r\n        }), {});\r\n        throw { message, errors: fieldErrors };\r\n      }\r\n      \r\n      throw { \r\n        message: error.message || 'An error occurred during login',\r\n        errors: [] \r\n      };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      const { data } = await api.post('/auth/register', userData);\r\n      const { token, user } = data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      setUser(user);\r\n      toast.success('Registration successful!');\r\n      \r\n      // Redirect based on user role\r\n      let redirectTo = '/dashboard'; // Default dashboard for regular users\r\n      if (user.role === 'admin') {\r\n        redirectTo = '/admin/dashboard'; // Admin dashboard\r\n      }\r\n      navigate(redirectTo, { replace: true }); // Always replace history for registration\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Registration failed. Please try again.';\r\n      const errors = error.response?.data?.errors || [];\r\n      toast.error(message);\r\n      throw { message, errors }; // Throw the full error object\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    toast.success('Logged out successfully!');\r\n    navigate('/login');\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const { data } = await api.put('/auth/me', userData);\r\n      setUser(data.user);\r\n      toast.success('Profile updated successfully!');\r\n      return data.user;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to update profile';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await api.put('/auth/change-password', { currentPassword, newPassword });\r\n      toast.success('Password changed successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to change password';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.post('/auth/forgot-password', { email });\r\n      toast.success('Password reset link sent to your email');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to send reset email';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      await api.post(`/auth/reset-password/${token}`, { newPassword });\r\n      toast.success('Password reset successful. Please login with your new password.');\r\n      navigate('/login');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to reset password';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role) => {\r\n    if (!user) return false;\r\n    return user.role === role;\r\n  };\r\n\r\n  // Check if user has any of the specified roles\r\n  const hasAnyRole = (roles) => {\r\n    if (!user) return false;\r\n    return roles.includes(user.role);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin',\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n    resetPassword,\r\n    hasRole,\r\n    hasAnyRole,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,WAAW,gBAAGV,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMW,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMiB,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACTd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;UAChE,MAAM;YAAEM;UAAK,CAAC,GAAG,MAAMpB,GAAG,CAACqB,GAAG,CAAC,UAAU,CAAC;UAC1Cb,OAAO,CAACY,IAAI,CAACb,IAAI,CAAC;QACpB;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChC,OAAOxB,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;MACrD,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,KAAK,GAAG,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;IAC5C,IAAI;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACF,MAAM;QAAET;MAAK,CAAC,GAAG,MAAMpB,GAAG,CAAC8B,IAAI,CAAC,aAAa,EAAE;QAAEJ,UAAU;QAAEC;MAAS,CAAC,CAAC;MAExE,IAAI,CAACP,IAAI,IAAI,CAACA,IAAI,CAACN,KAAK,IAAI,CAACM,IAAI,CAACb,IAAI,EAAE;QACtC,MAAM,IAAIwB,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAM;QAAEjB,KAAK;QAAEP;MAAK,CAAC,GAAGa,IAAI;MAE5BL,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;;MAEhE;MACA,MAAMmB,QAAQ,GAAG;QACfC,EAAE,EAAE3B,IAAI,CAAC2B,EAAE,IAAI3B,IAAI,CAAC4B,GAAG;QACvBC,KAAK,EAAE7B,IAAI,CAAC6B,KAAK;QACjBC,SAAS,EAAE9B,IAAI,CAAC8B,SAAS;QACzBC,QAAQ,EAAE/B,IAAI,CAAC+B,QAAQ;QACvBC,KAAK,EAAEhC,IAAI,CAACgC,KAAK;QACjBC,IAAI,EAAEjC,IAAI,CAACiC,IAAI,IAAI,MAAM;QACzBC,QAAQ,EAAElC,IAAI,CAACkC;MACjB,CAAC;MAEDjC,OAAO,CAACyB,QAAQ,CAAC;MACjBlC,KAAK,CAAC2C,OAAO,CAAC,yBAAyB,CAAC;;MAExC;MACA,MAAMC,UAAU,GAAGV,QAAQ,CAACO,IAAI,KAAK,OAAO,GAAG,kBAAkB,GAAG,YAAY;MAChF,MAAMI,IAAI,IAAAhB,eAAA,GAAGhB,QAAQ,CAACiC,KAAK,cAAAjB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBgB,IAAI,cAAAf,oBAAA,uBAApBA,oBAAA,CAAsBiB,QAAQ;MAC3CnC,QAAQ,CAACiC,IAAI,IAAID,UAAU,EAAE;QAAEI,OAAO,EAAE;MAAK,CAAC,CAAC;MAE/C,OAAO;QAAEL,OAAO,EAAE,IAAI;QAAEnC,IAAI,EAAE0B;MAAS,CAAC;IAC1C,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA0B,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACd5B,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAM8B,OAAO,GAAG,EAAAJ,eAAA,GAAA1B,KAAK,CAAC+B,QAAQ,cAAAL,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgB5B,IAAI,cAAA6B,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,4DAA4D;MAC7G,MAAME,MAAM,GAAG,EAAAJ,gBAAA,GAAA5B,KAAK,CAAC+B,QAAQ,cAAAH,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB9B,IAAI,cAAA+B,qBAAA,uBAApBA,qBAAA,CAAsBG,MAAM,KAAI,EAAE;;MAEjD;MACA,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,MAAM;UAC/C,GAAGD,GAAG;UACN,CAACC,GAAG,CAACC,IAAI,IAAID,GAAG,CAACE,KAAK,GAAGF,GAAG,CAACG,GAAG,IAAIH,GAAG,CAACP;QAC1C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACP,MAAM;UAAEA,OAAO;UAAEE,MAAM,EAAEE;QAAY,CAAC;MACxC;MAEA,MAAM;QACJJ,OAAO,EAAE9B,KAAK,CAAC8B,OAAO,IAAI,gCAAgC;QAC1DE,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMS,QAAQ,GAAG,MAAO9B,QAAQ,IAAK;IACnC,IAAI;MACF,MAAM;QAAEb;MAAK,CAAC,GAAG,MAAMpB,GAAG,CAAC8B,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;MAC3D,MAAM;QAAEnB,KAAK;QAAEP;MAAK,CAAC,GAAGa,IAAI;MAE5BL,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;MAEhEN,OAAO,CAACD,IAAI,CAAC;MACbR,KAAK,CAAC2C,OAAO,CAAC,0BAA0B,CAAC;;MAEzC;MACA,IAAIC,UAAU,GAAG,YAAY,CAAC,CAAC;MAC/B,IAAIpC,IAAI,CAACiC,IAAI,KAAK,OAAO,EAAE;QACzBG,UAAU,GAAG,kBAAkB,CAAC,CAAC;MACnC;MACAhC,QAAQ,CAACgC,UAAU,EAAE;QAAEI,OAAO,EAAE;MAAK,CAAC,CAAC,CAAC,CAAC;;MAEzC,OAAO;QAAEL,OAAO,EAAE,IAAI;QAAEnC;MAAK,CAAC;IAChC,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA,IAAA0C,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACd,MAAMf,OAAO,GAAG,EAAAY,gBAAA,GAAA1C,KAAK,CAAC+B,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5C,IAAI,cAAA6C,qBAAA,uBAApBA,qBAAA,CAAsBb,OAAO,KAAI,wCAAwC;MACzF,MAAME,MAAM,GAAG,EAAAY,gBAAA,GAAA5C,KAAK,CAAC+B,QAAQ,cAAAa,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB9C,IAAI,cAAA+C,qBAAA,uBAApBA,qBAAA,CAAsBb,MAAM,KAAI,EAAE;MACjDvD,KAAK,CAACuB,KAAK,CAAC8B,OAAO,CAAC;MACpB,MAAM;QAAEA,OAAO;QAAEE;MAAO,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAMc,MAAM,GAAGA,CAAA,KAAM;IACnBrD,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOxB,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACnDX,OAAO,CAAC,IAAI,CAAC;IACbT,KAAK,CAAC2C,OAAO,CAAC,0BAA0B,CAAC;IACzC/B,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAM0D,aAAa,GAAG,MAAOpC,QAAQ,IAAK;IACxC,IAAI;MACF,MAAM;QAAEb;MAAK,CAAC,GAAG,MAAMpB,GAAG,CAACsE,GAAG,CAAC,UAAU,EAAErC,QAAQ,CAAC;MACpDzB,OAAO,CAACY,IAAI,CAACb,IAAI,CAAC;MAClBR,KAAK,CAAC2C,OAAO,CAAC,+BAA+B,CAAC;MAC9C,OAAOtB,IAAI,CAACb,IAAI;IAClB,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA,IAAAiD,gBAAA,EAAAC,qBAAA;MACd,MAAMpB,OAAO,GAAG,EAAAmB,gBAAA,GAAAjD,KAAK,CAAC+B,QAAQ,cAAAkB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnD,IAAI,cAAAoD,qBAAA,uBAApBA,qBAAA,CAAsBpB,OAAO,KAAI,0BAA0B;MAC3ErD,KAAK,CAACuB,KAAK,CAAC8B,OAAO,CAAC;MACpB,MAAM9B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMmD,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEC,WAAW,KAAK;IAC7D,IAAI;MACF,MAAM3E,GAAG,CAACsE,GAAG,CAAC,uBAAuB,EAAE;QAAEI,eAAe;QAAEC;MAAY,CAAC,CAAC;MACxE5E,KAAK,CAAC2C,OAAO,CAAC,gCAAgC,CAAC;MAC/C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA,IAAAsD,gBAAA,EAAAC,qBAAA;MACd,MAAMzB,OAAO,GAAG,EAAAwB,gBAAA,GAAAtD,KAAK,CAAC+B,QAAQ,cAAAuB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxD,IAAI,cAAAyD,qBAAA,uBAApBA,qBAAA,CAAsBzB,OAAO,KAAI,2BAA2B;MAC5ErD,KAAK,CAACuB,KAAK,CAAC8B,OAAO,CAAC;MACpB,MAAM9B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMwD,cAAc,GAAG,MAAO1C,KAAK,IAAK;IACtC,IAAI;MACF,MAAMpC,GAAG,CAAC8B,IAAI,CAAC,uBAAuB,EAAE;QAAEM;MAAM,CAAC,CAAC;MAClDrC,KAAK,CAAC2C,OAAO,CAAC,wCAAwC,CAAC;MACvD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA,IAAAyD,gBAAA,EAAAC,qBAAA;MACd,MAAM5B,OAAO,GAAG,EAAA2B,gBAAA,GAAAzD,KAAK,CAAC+B,QAAQ,cAAA0B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB3D,IAAI,cAAA4D,qBAAA,uBAApBA,qBAAA,CAAsB5B,OAAO,KAAI,4BAA4B;MAC7ErD,KAAK,CAACuB,KAAK,CAAC8B,OAAO,CAAC;MACpB,MAAM9B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM2D,aAAa,GAAG,MAAAA,CAAOnE,KAAK,EAAE6D,WAAW,KAAK;IAClD,IAAI;MACF,MAAM3E,GAAG,CAAC8B,IAAI,CAAC,wBAAwBhB,KAAK,EAAE,EAAE;QAAE6D;MAAY,CAAC,CAAC;MAChE5E,KAAK,CAAC2C,OAAO,CAAC,iEAAiE,CAAC;MAChF/B,QAAQ,CAAC,QAAQ,CAAC;MAClB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA,IAAA4D,gBAAA,EAAAC,qBAAA;MACd,MAAM/B,OAAO,GAAG,EAAA8B,gBAAA,GAAA5D,KAAK,CAAC+B,QAAQ,cAAA6B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB9D,IAAI,cAAA+D,qBAAA,uBAApBA,qBAAA,CAAsB/B,OAAO,KAAI,0BAA0B;MAC3ErD,KAAK,CAACuB,KAAK,CAAC8B,OAAO,CAAC;MACpB,MAAM9B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM8D,OAAO,GAAI5C,IAAI,IAAK;IACxB,IAAI,CAACjC,IAAI,EAAE,OAAO,KAAK;IACvB,OAAOA,IAAI,CAACiC,IAAI,KAAKA,IAAI;EAC3B,CAAC;;EAED;EACA,MAAM6C,UAAU,GAAIC,KAAK,IAAK;IAC5B,IAAI,CAAC/E,IAAI,EAAE,OAAO,KAAK;IACvB,OAAO+E,KAAK,CAACC,QAAQ,CAAChF,IAAI,CAACiC,IAAI,CAAC;EAClC,CAAC;EAED,MAAMgD,KAAK,GAAG;IACZjF,IAAI;IACJE,OAAO;IACPgF,eAAe,EAAE,CAAC,CAAClF,IAAI;IACvBmF,OAAO,EAAE,CAAAnF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,IAAI,MAAK,OAAO;IAC/Bf,KAAK;IACLsC,QAAQ;IACRK,MAAM;IACNC,aAAa;IACbI,cAAc;IACdK,cAAc;IACdG,aAAa;IACbG,OAAO;IACPC;EACF,CAAC;EAED,oBAAOnF,OAAA,CAACC,WAAW,CAACwF,QAAQ;IAACH,KAAK,EAAEA,KAAM;IAAAnF,QAAA,EAAEA;EAAQ;IAAAuF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACzF,EAAA,CA3MWF,YAAY;EAAA,QAGNP,WAAW,EACXC,WAAW;AAAA;AAAAkG,EAAA,GAJjB5F,YAAY;AA6MzB,OAAO,MAAM6F,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGxG,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAACgG,OAAO,EAAE;IACZ,MAAM,IAAIpE,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOoE,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAe9F,WAAW;AAAC,IAAA6F,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}