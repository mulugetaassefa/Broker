{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react\\\\project\\\\client\\\\src\\\\contexts\\\\SocketContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  var _socketRef$current7;\n  const {\n    user,\n    token\n  } = useAuth();\n  const socketRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = parseInt(process.env.REACT_APP_WS_RECONNECT_ATTEMPTS || '5', 10);\n  const reconnectDelay = parseInt(process.env.REACT_APP_WS_RECONNECT_DELAY || '1000', 10);\n  const wsTimeout = parseInt(process.env.REACT_APP_WS_TIMEOUT || '20000', 10);\n  const activeConversations = useRef([]);\n  const connectSocket = useCallback(() => {\n    if (!user || !token) return;\n\n    // Close existing connection if any\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n    console.log('Attempting to connect to WebSocket...');\n\n    // Initialize new socket connection\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    socketRef.current = io(socketUrl, {\n      withCredentials: true,\n      auth: {\n        token\n      },\n      reconnection: true,\n      reconnectionAttempts: maxReconnectAttempts,\n      reconnectionDelay: reconnectDelay,\n      reconnectionDelayMax: 5000,\n      timeout: wsTimeout,\n      transports: ['websocket', 'polling']\n    });\n\n    // Connection events\n    socketRef.current.on('connect', () => {\n      console.log('WebSocket connected');\n      reconnectAttempts.current = 0;\n      setupMessageHandlers();\n\n      // Rejoin any active conversations\n      if (activeConversations.current.length > 0) {\n        activeConversations.current.forEach(conversationId => {\n          socketRef.current.emit('join_conversation', conversationId);\n        });\n      }\n    });\n    socketRef.current.on('connect_error', err => {\n      console.error('WebSocket connection error:', err.message);\n      if (reconnectAttempts.current < maxReconnectAttempts) {\n        const delay = reconnectDelay * Math.pow(2, reconnectAttempts.current);\n        console.log(`Reconnection attempt ${reconnectAttempts.current + 1} in ${delay}ms`);\n        reconnectAttempts.current++;\n      }\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('WebSocket disconnected. Reason:', reason);\n    });\n\n    // Error handling\n    socketRef.current.on('error', error => {\n      console.error('WebSocket error:', error);\n    });\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [user, token]);\n\n  // Add message event handlers\n  const setupMessageHandlers = useCallback(() => {\n    if (!socketRef.current) return;\n    const handleNewMessage = message => {\n      // This will be handled by the components that use the socket\n      console.log('New message received:', message);\n    };\n    const handleMessageRead = data => {\n      console.log('Message read:', data);\n    };\n    socketRef.current.on('new_message', handleNewMessage);\n    socketRef.current.on('message_read', handleMessageRead);\n    return () => {\n      var _socketRef$current, _socketRef$current2;\n      (_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.off('new_message', handleNewMessage);\n      (_socketRef$current2 = socketRef.current) === null || _socketRef$current2 === void 0 ? void 0 : _socketRef$current2.off('message_read', handleMessageRead);\n    };\n  }, []);\n\n  // Connect on mount and when user/token changes\n  useEffect(() => {\n    connectSocket();\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, [connectSocket]);\n  const joinConversation = useCallback(conversationId => {\n    var _socketRef$current3;\n    if ((_socketRef$current3 = socketRef.current) !== null && _socketRef$current3 !== void 0 && _socketRef$current3.connected) {\n      socketRef.current.emit('join_conversation', conversationId);\n      activeConversations.current.push(conversationId);\n    } else {\n      console.warn('Cannot join conversation: WebSocket not connected');\n    }\n  }, []);\n  const leaveConversation = useCallback(conversationId => {\n    var _socketRef$current4;\n    if ((_socketRef$current4 = socketRef.current) !== null && _socketRef$current4 !== void 0 && _socketRef$current4.connected) {\n      socketRef.current.emit('leave_conversation', conversationId);\n      activeConversations.current = activeConversations.current.filter(id => id !== conversationId);\n    }\n  }, []);\n  const sendMessage = useCallback(messageData => {\n    return new Promise((resolve, reject) => {\n      var _socketRef$current5;\n      if (!((_socketRef$current5 = socketRef.current) !== null && _socketRef$current5 !== void 0 && _socketRef$current5.connected)) {\n        return reject(new Error('WebSocket not connected'));\n      }\n      socketRef.current.emit('send_message', messageData, response => {\n        if (response.error) {\n          reject(new Error(response.error));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n  }, []);\n  const markAsRead = useCallback(messageId => {\n    var _socketRef$current6;\n    if (!((_socketRef$current6 = socketRef.current) !== null && _socketRef$current6 !== void 0 && _socketRef$current6.connected)) return;\n    socketRef.current.emit('mark_as_read', {\n      messageId\n    });\n  }, []);\n  const value = {\n    socket: socketRef.current,\n    isConnected: ((_socketRef$current7 = socketRef.current) === null || _socketRef$current7 === void 0 ? void 0 : _socketRef$current7.connected) || false,\n    joinConversation,\n    leaveConversation,\n    sendMessage,\n    markAsRead\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"1wrfnVmPRiyHpjFLgjY1RKoALEU=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useCallback","io","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","_socketRef$current7","user","token","socketRef","reconnectAttempts","maxReconnectAttempts","parseInt","process","env","REACT_APP_WS_RECONNECT_ATTEMPTS","reconnectDelay","REACT_APP_WS_RECONNECT_DELAY","wsTimeout","REACT_APP_WS_TIMEOUT","activeConversations","connectSocket","current","disconnect","console","log","socketUrl","REACT_APP_SOCKET_URL","withCredentials","auth","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","transports","on","setupMessageHandlers","length","forEach","conversationId","emit","err","error","message","delay","Math","pow","reason","handleNewMessage","handleMessageRead","data","_socketRef$current","_socketRef$current2","off","joinConversation","_socketRef$current3","connected","push","warn","leaveConversation","_socketRef$current4","filter","id","sendMessage","messageData","Promise","resolve","reject","_socketRef$current5","Error","response","markAsRead","messageId","_socketRef$current6","value","socket","isConnected","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","$RefreshReg$"],"sources":["D:/project/react/project/client/src/contexts/SocketContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useCallback } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const { user, token } = useAuth();\r\n  const socketRef = useRef(null);\r\n  const reconnectAttempts = useRef(0);\r\n  const maxReconnectAttempts = parseInt(process.env.REACT_APP_WS_RECONNECT_ATTEMPTS || '5', 10);\r\n  const reconnectDelay = parseInt(process.env.REACT_APP_WS_RECONNECT_DELAY || '1000', 10);\r\n  const wsTimeout = parseInt(process.env.REACT_APP_WS_TIMEOUT || '20000', 10);\r\n  const activeConversations = useRef([]);\r\n\r\n  const connectSocket = useCallback(() => {\r\n    if (!user || !token) return;\r\n\r\n    // Close existing connection if any\r\n    if (socketRef.current) {\r\n      socketRef.current.disconnect();\r\n      socketRef.current = null;\r\n    }\r\n\r\n    console.log('Attempting to connect to WebSocket...');\r\n    \r\n    // Initialize new socket connection\r\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n    socketRef.current = io(socketUrl, {\r\n      withCredentials: true,\r\n      auth: { token },\r\n      reconnection: true,\r\n      reconnectionAttempts: maxReconnectAttempts,\r\n      reconnectionDelay: reconnectDelay,\r\n      reconnectionDelayMax: 5000,\r\n      timeout: wsTimeout,\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    // Connection events\r\n    socketRef.current.on('connect', () => {\r\n      console.log('WebSocket connected');\r\n      reconnectAttempts.current = 0;\r\n      setupMessageHandlers();\r\n      \r\n      // Rejoin any active conversations\r\n      if (activeConversations.current.length > 0) {\r\n        activeConversations.current.forEach(conversationId => {\r\n          socketRef.current.emit('join_conversation', conversationId);\r\n        });\r\n      }\r\n    });\r\n\r\n    socketRef.current.on('connect_error', (err) => {\r\n      console.error('WebSocket connection error:', err.message);\r\n      if (reconnectAttempts.current < maxReconnectAttempts) {\r\n        const delay = reconnectDelay * Math.pow(2, reconnectAttempts.current);\r\n        console.log(`Reconnection attempt ${reconnectAttempts.current + 1} in ${delay}ms`);\r\n        reconnectAttempts.current++;\r\n      }\r\n    });\r\n\r\n    socketRef.current.on('disconnect', (reason) => {\r\n      console.log('WebSocket disconnected. Reason:', reason);\r\n    });\r\n\r\n    // Error handling\r\n    socketRef.current.on('error', (error) => {\r\n      console.error('WebSocket error:', error);\r\n    });\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n    };\r\n  }, [user, token]);\r\n\r\n  // Add message event handlers\r\n  const setupMessageHandlers = useCallback(() => {\r\n    if (!socketRef.current) return;\r\n\r\n    const handleNewMessage = (message) => {\r\n      // This will be handled by the components that use the socket\r\n      console.log('New message received:', message);\r\n    };\r\n\r\n    const handleMessageRead = (data) => {\r\n      console.log('Message read:', data);\r\n    };\r\n\r\n    socketRef.current.on('new_message', handleNewMessage);\r\n    socketRef.current.on('message_read', handleMessageRead);\r\n\r\n    return () => {\r\n      socketRef.current?.off('new_message', handleNewMessage);\r\n      socketRef.current?.off('message_read', handleMessageRead);\r\n    };\r\n  }, []);\r\n\r\n  // Connect on mount and when user/token changes\r\n  useEffect(() => {\r\n    connectSocket();\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n    };\r\n  }, [connectSocket]);\r\n\r\n  const joinConversation = useCallback((conversationId) => {\r\n    if (socketRef.current?.connected) {\r\n      socketRef.current.emit('join_conversation', conversationId);\r\n      activeConversations.current.push(conversationId);\r\n    } else {\r\n      console.warn('Cannot join conversation: WebSocket not connected');\r\n    }\r\n  }, []);\r\n\r\n  const leaveConversation = useCallback((conversationId) => {\r\n    if (socketRef.current?.connected) {\r\n      socketRef.current.emit('leave_conversation', conversationId);\r\n      activeConversations.current = activeConversations.current.filter(id => id !== conversationId);\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((messageData) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!socketRef.current?.connected) {\r\n        return reject(new Error('WebSocket not connected'));\r\n      }\r\n      \r\n      socketRef.current.emit('send_message', messageData, (response) => {\r\n        if (response.error) {\r\n          reject(new Error(response.error));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const markAsRead = useCallback((messageId) => {\r\n    if (!socketRef.current?.connected) return;\r\n    socketRef.current.emit('mark_as_read', { messageId });\r\n  }, []);\r\n\r\n  const value = {\r\n    socket: socketRef.current,\r\n    isConnected: socketRef.current?.connected || false,\r\n    joinConversation,\r\n    leaveConversation,\r\n    sendMessage,\r\n    markAsRead,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}