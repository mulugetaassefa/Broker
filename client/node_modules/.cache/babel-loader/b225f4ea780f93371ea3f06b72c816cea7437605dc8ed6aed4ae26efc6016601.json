{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react\\\\project\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          const {\n            data\n          } = await api.get('/auth/me');\n          setUser(data.user);\n        }\n      } catch (error) {\n        console.error('Failed to load user', error);\n        localStorage.removeItem('token');\n        delete api.defaults.headers.common['Authorization'];\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async (identifier, password) => {\n    try {\n      console.log('Attempting login with:', {\n        identifier\n      });\n\n      // Make the login request\n      const response = await api.post('/auth/login', {\n        identifier,\n        password\n      });\n      console.log('Login response:', response);\n      if (!response) {\n        console.error('No response received from server');\n        throw new Error('No response from server');\n      }\n      const {\n        token,\n        user\n      } = response;\n      if (!token || !user) {\n        console.error('Invalid response structure:', response);\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token and set auth header\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Normalize user data\n      const userData = {\n        id: user.id || user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        role: user.role || 'user',\n        userType: user.userType\n      };\n      console.log('Setting user data:', userData);\n      setUser(userData);\n      toast.success('Logged in successfully!');\n\n      // Always redirect to dashboard after login\n      console.log('Redirecting to dashboard');\n      navigate('/dashboard', {\n        replace: true\n      });\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Login error:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n\n      // Handle specific error cases\n      if (error.response) {\n        const {\n          status,\n          data\n        } = error.response;\n\n        // Handle 401 Unauthorized\n        if (status === 401) {\n          throw {\n            message: data.message || 'Invalid email or password',\n            errors: data.errors || []\n          };\n        }\n\n        // Handle validation errors (422)\n        if (status === 422 && data.errors) {\n          const fieldErrors = data.errors.reduce((acc, err) => ({\n            ...acc,\n            [err.param || 'root']: err.msg || 'Validation error'\n          }), {});\n          throw {\n            message: data.message || 'Validation failed',\n            errors: fieldErrors\n          };\n        }\n\n        // Handle other error statuses\n        throw {\n          message: data.message || `Error: ${status} - ${error.response.statusText}`,\n          errors: data.errors || []\n        };\n      }\n\n      // Handle network errors\n      if (error.request) {\n        throw {\n          message: 'Unable to connect to the server. Please check your internet connection.',\n          errors: []\n        };\n      }\n\n      // Handle other errors\n      throw {\n        message: error.message || 'An unexpected error occurred',\n        errors: []\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      console.log('Attempting to register user:', userData.email);\n\n      // Make the registration request\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response);\n      if (!response) {\n        console.error('No response received from server during registration');\n        throw new Error('No response from server');\n      }\n      const {\n        token,\n        user\n      } = response;\n      if (!token || !user) {\n        console.error('Invalid registration response structure:', response);\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token and set auth header\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Normalize user data\n      const normalizedUserData = {\n        id: user.id || user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        role: user.role || 'user',\n        userType: user.userType\n      };\n      console.log('Setting user data after registration:', normalizedUserData);\n      setUser(normalizedUserData);\n      toast.success('Registration successful! Welcome!');\n\n      // Redirect based on user role\n      const redirectTo = normalizedUserData.role === 'admin' ? '/admin/dashboard' : '/dashboard';\n      navigate(redirectTo, {\n        replace: true\n      });\n      return {\n        success: true,\n        user: normalizedUserData\n      };\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error('Registration error:', {\n        message: error.message,\n        response: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status\n      });\n\n      // Handle specific error cases\n      if (error.response) {\n        const {\n          status,\n          data\n        } = error.response;\n\n        // Handle 400 Bad Request (validation errors)\n        if (status === 400 && data.errors) {\n          const fieldErrors = data.errors.reduce((acc, err) => ({\n            ...acc,\n            [err.param || 'root']: err.msg || 'Validation error'\n          }), {});\n          throw {\n            message: data.message || 'Validation failed',\n            errors: fieldErrors\n          };\n        }\n\n        // Handle other error statuses\n        throw {\n          message: data.message || `Error: ${status} - ${error.response.statusText}`,\n          errors: data.errors || []\n        };\n      }\n\n      // Handle network errors\n      if (error.request) {\n        throw {\n          message: 'Unable to connect to the server. Please check your internet connection.',\n          errors: []\n        };\n      }\n\n      // Handle other errors\n      throw {\n        message: error.message || 'An unexpected error occurred during registration',\n        errors: []\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n    toast.success('Logged out successfully!');\n    navigate('/login');\n  };\n\n  // Update user profile\n  const updateProfile = async userData => {\n    try {\n      const {\n        data\n      } = await api.put('/auth/me', userData);\n      setUser(data.user);\n      toast.success('Profile updated successfully!');\n      return data.user;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update profile';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return true;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to change password';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      await api.post('/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset link sent to your email');\n      return true;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      const message = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to send reset email';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      await api.post(`/auth/reset-password/${token}`, {\n        newPassword\n      });\n      toast.success('Password reset successful. Please login with your new password.');\n      navigate('/login');\n      return true;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      const message = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to reset password';\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    if (!user) return false;\n    return user.role === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    if (!user) return false;\n    return roles.includes(user.role);\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin',\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    forgotPassword,\n    resetPassword,\n    hasRole,\n    hasAnyRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"VVuhODWcOIbpSDedBD8fuoocTYc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","useNavigate","useLocation","toast","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","location","loadUser","token","localStorage","getItem","defaults","headers","common","data","get","error","console","removeItem","login","identifier","password","log","response","post","Error","setItem","userData","id","_id","email","firstName","lastName","phone","role","userType","success","replace","_error$response","_error$response2","message","status","errors","fieldErrors","reduce","acc","err","param","msg","statusText","request","register","normalizedUserData","redirectTo","_error$response3","_error$response4","logout","updateProfile","put","_error$response5","_error$response5$data","changePassword","currentPassword","newPassword","_error$response6","_error$response6$data","forgotPassword","_error$response7","_error$response7$data","resetPassword","_error$response8","_error$response8$data","hasRole","hasAnyRole","roles","includes","value","isAuthenticated","isAdmin","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["D:/project/react/project/client/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { toast } from 'react-hot-toast';\r\nimport { api } from '../services/api';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          const { data } = await api.get('/auth/me');\r\n          setUser(data.user);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load user', error);\r\n        localStorage.removeItem('token');\r\n        delete api.defaults.headers.common['Authorization'];\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (identifier, password) => {\r\n    try {\r\n      console.log('Attempting login with:', { identifier });\r\n      \r\n      // Make the login request\r\n      const response = await api.post('/auth/login', { identifier, password });\r\n      console.log('Login response:', response);\r\n      \r\n      if (!response) {\r\n        console.error('No response received from server');\r\n        throw new Error('No response from server');\r\n      }\r\n      \r\n      const { token, user } = response;\r\n      \r\n      if (!token || !user) {\r\n        console.error('Invalid response structure:', response);\r\n        throw new Error('Invalid response from server');\r\n      }\r\n      \r\n      // Store token and set auth header\r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Normalize user data\r\n      const userData = {\r\n        id: user.id || user._id,\r\n        email: user.email,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        phone: user.phone,\r\n        role: user.role || 'user',\r\n        userType: user.userType\r\n      };\r\n      \r\n      console.log('Setting user data:', userData);\r\n      setUser(userData);\r\n      toast.success('Logged in successfully!');\r\n      \r\n      // Always redirect to dashboard after login\r\n      console.log('Redirecting to dashboard');\r\n      navigate('/dashboard', { replace: true });\r\n      \r\n      return { success: true, user: userData };\r\n      \r\n    } catch (error) {\r\n      console.error('Login error:', {\r\n        message: error.message,\r\n        response: error.response?.data,\r\n        status: error.response?.status\r\n      });\r\n      \r\n      // Handle specific error cases\r\n      if (error.response) {\r\n        const { status, data } = error.response;\r\n        \r\n        // Handle 401 Unauthorized\r\n        if (status === 401) {\r\n          throw { \r\n            message: data.message || 'Invalid email or password',\r\n            errors: data.errors || []\r\n          };\r\n        }\r\n        \r\n        // Handle validation errors (422)\r\n        if (status === 422 && data.errors) {\r\n          const fieldErrors = data.errors.reduce((acc, err) => ({\r\n            ...acc,\r\n            [err.param || 'root']: err.msg || 'Validation error'\r\n          }), {});\r\n          \r\n          throw { \r\n            message: data.message || 'Validation failed',\r\n            errors: fieldErrors\r\n          };\r\n        }\r\n        \r\n        // Handle other error statuses\r\n        throw { \r\n          message: data.message || `Error: ${status} - ${error.response.statusText}`,\r\n          errors: data.errors || []\r\n        };\r\n      }\r\n      \r\n      // Handle network errors\r\n      if (error.request) {\r\n        throw { \r\n          message: 'Unable to connect to the server. Please check your internet connection.',\r\n          errors: []\r\n        };\r\n      }\r\n      \r\n      // Handle other errors\r\n      throw { \r\n        message: error.message || 'An unexpected error occurred',\r\n        errors: []\r\n      };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      console.log('Attempting to register user:', userData.email);\r\n      \r\n      // Make the registration request\r\n      const response = await api.post('/auth/register', userData);\r\n      console.log('Registration response:', response);\r\n      \r\n      if (!response) {\r\n        console.error('No response received from server during registration');\r\n        throw new Error('No response from server');\r\n      }\r\n      \r\n      const { token, user } = response;\r\n      \r\n      if (!token || !user) {\r\n        console.error('Invalid registration response structure:', response);\r\n        throw new Error('Invalid response from server');\r\n      }\r\n      \r\n      // Store token and set auth header\r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Normalize user data\r\n      const normalizedUserData = {\r\n        id: user.id || user._id,\r\n        email: user.email,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        phone: user.phone,\r\n        role: user.role || 'user',\r\n        userType: user.userType\r\n      };\r\n      \r\n      console.log('Setting user data after registration:', normalizedUserData);\r\n      setUser(normalizedUserData);\r\n      toast.success('Registration successful! Welcome!');\r\n      \r\n      // Redirect based on user role\r\n      const redirectTo = normalizedUserData.role === 'admin' ? '/admin/dashboard' : '/dashboard';\r\n      navigate(redirectTo, { replace: true });\r\n      \r\n      return { success: true, user: normalizedUserData };\r\n      \r\n    } catch (error) {\r\n      console.error('Registration error:', {\r\n        message: error.message,\r\n        response: error.response?.data,\r\n        status: error.response?.status\r\n      });\r\n      \r\n      // Handle specific error cases\r\n      if (error.response) {\r\n        const { status, data } = error.response;\r\n        \r\n        // Handle 400 Bad Request (validation errors)\r\n        if (status === 400 && data.errors) {\r\n          const fieldErrors = data.errors.reduce((acc, err) => ({\r\n            ...acc,\r\n            [err.param || 'root']: err.msg || 'Validation error'\r\n          }), {});\r\n          \r\n          throw { \r\n            message: data.message || 'Validation failed',\r\n            errors: fieldErrors\r\n          };\r\n        }\r\n        \r\n        // Handle other error statuses\r\n        throw { \r\n          message: data.message || `Error: ${status} - ${error.response.statusText}`,\r\n          errors: data.errors || []\r\n        };\r\n      }\r\n      \r\n      // Handle network errors\r\n      if (error.request) {\r\n        throw { \r\n          message: 'Unable to connect to the server. Please check your internet connection.',\r\n          errors: []\r\n        };\r\n      }\r\n      \r\n      // Handle other errors\r\n      throw { \r\n        message: error.message || 'An unexpected error occurred during registration',\r\n        errors: []\r\n      };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    toast.success('Logged out successfully!');\r\n    navigate('/login');\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const { data } = await api.put('/auth/me', userData);\r\n      setUser(data.user);\r\n      toast.success('Profile updated successfully!');\r\n      return data.user;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to update profile';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await api.put('/auth/change-password', { currentPassword, newPassword });\r\n      toast.success('Password changed successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to change password';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.post('/auth/forgot-password', { email });\r\n      toast.success('Password reset link sent to your email');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to send reset email';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      await api.post(`/auth/reset-password/${token}`, { newPassword });\r\n      toast.success('Password reset successful. Please login with your new password.');\r\n      navigate('/login');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to reset password';\r\n      toast.error(message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role) => {\r\n    if (!user) return false;\r\n    return user.role === role;\r\n  };\r\n\r\n  // Check if user has any of the specified roles\r\n  const hasAnyRole = (roles) => {\r\n    if (!user) return false;\r\n    return roles.includes(user.role);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin',\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    forgotPassword,\r\n    resetPassword,\r\n    hasRole,\r\n    hasAnyRole,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,WAAW,gBAAGV,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMW,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMiB,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACTd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;UAChE,MAAM;YAAEM;UAAK,CAAC,GAAG,MAAMpB,GAAG,CAACqB,GAAG,CAAC,UAAU,CAAC;UAC1Cb,OAAO,CAACY,IAAI,CAACb,IAAI,CAAC;QACpB;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChC,OAAOxB,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;MACrD,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,KAAK,GAAG,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;IAC5C,IAAI;MACFJ,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAE;QAAEF;MAAW,CAAC,CAAC;;MAErD;MACA,MAAMG,QAAQ,GAAG,MAAM7B,GAAG,CAAC8B,IAAI,CAAC,aAAa,EAAE;QAAEJ,UAAU;QAAEC;MAAS,CAAC,CAAC;MACxEJ,OAAO,CAACK,GAAG,CAAC,iBAAiB,EAAEC,QAAQ,CAAC;MAExC,IAAI,CAACA,QAAQ,EAAE;QACbN,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;QACjD,MAAM,IAAIS,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAM;QAAEjB,KAAK;QAAEP;MAAK,CAAC,GAAGsB,QAAQ;MAEhC,IAAI,CAACf,KAAK,IAAI,CAACP,IAAI,EAAE;QACnBgB,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEO,QAAQ,CAAC;QACtD,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;MACjD;;MAEA;MACAhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;;MAEhE;MACA,MAAMmB,QAAQ,GAAG;QACfC,EAAE,EAAE3B,IAAI,CAAC2B,EAAE,IAAI3B,IAAI,CAAC4B,GAAG;QACvBC,KAAK,EAAE7B,IAAI,CAAC6B,KAAK;QACjBC,SAAS,EAAE9B,IAAI,CAAC8B,SAAS;QACzBC,QAAQ,EAAE/B,IAAI,CAAC+B,QAAQ;QACvBC,KAAK,EAAEhC,IAAI,CAACgC,KAAK;QACjBC,IAAI,EAAEjC,IAAI,CAACiC,IAAI,IAAI,MAAM;QACzBC,QAAQ,EAAElC,IAAI,CAACkC;MACjB,CAAC;MAEDlB,OAAO,CAACK,GAAG,CAAC,oBAAoB,EAAEK,QAAQ,CAAC;MAC3CzB,OAAO,CAACyB,QAAQ,CAAC;MACjBlC,KAAK,CAAC2C,OAAO,CAAC,yBAAyB,CAAC;;MAExC;MACAnB,OAAO,CAACK,GAAG,CAAC,0BAA0B,CAAC;MACvCjB,QAAQ,CAAC,YAAY,EAAE;QAAEgC,OAAO,EAAE;MAAK,CAAC,CAAC;MAEzC,OAAO;QAAED,OAAO,EAAE,IAAI;QAAEnC,IAAI,EAAE0B;MAAS,CAAC;IAE1C,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAsB,eAAA,EAAAC,gBAAA;MACdtB,OAAO,CAACD,KAAK,CAAC,cAAc,EAAE;QAC5BwB,OAAO,EAAExB,KAAK,CAACwB,OAAO;QACtBjB,QAAQ,GAAAe,eAAA,GAAEtB,KAAK,CAACO,QAAQ,cAAAe,eAAA,uBAAdA,eAAA,CAAgBxB,IAAI;QAC9B2B,MAAM,GAAAF,gBAAA,GAAEvB,KAAK,CAACO,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBE;MAC1B,CAAC,CAAC;;MAEF;MACA,IAAIzB,KAAK,CAACO,QAAQ,EAAE;QAClB,MAAM;UAAEkB,MAAM;UAAE3B;QAAK,CAAC,GAAGE,KAAK,CAACO,QAAQ;;QAEvC;QACA,IAAIkB,MAAM,KAAK,GAAG,EAAE;UAClB,MAAM;YACJD,OAAO,EAAE1B,IAAI,CAAC0B,OAAO,IAAI,2BAA2B;YACpDE,MAAM,EAAE5B,IAAI,CAAC4B,MAAM,IAAI;UACzB,CAAC;QACH;;QAEA;QACA,IAAID,MAAM,KAAK,GAAG,IAAI3B,IAAI,CAAC4B,MAAM,EAAE;UACjC,MAAMC,WAAW,GAAG7B,IAAI,CAAC4B,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,MAAM;YACpD,GAAGD,GAAG;YACN,CAACC,GAAG,CAACC,KAAK,IAAI,MAAM,GAAGD,GAAG,CAACE,GAAG,IAAI;UACpC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAEP,MAAM;YACJR,OAAO,EAAE1B,IAAI,CAAC0B,OAAO,IAAI,mBAAmB;YAC5CE,MAAM,EAAEC;UACV,CAAC;QACH;;QAEA;QACA,MAAM;UACJH,OAAO,EAAE1B,IAAI,CAAC0B,OAAO,IAAI,UAAUC,MAAM,MAAMzB,KAAK,CAACO,QAAQ,CAAC0B,UAAU,EAAE;UAC1EP,MAAM,EAAE5B,IAAI,CAAC4B,MAAM,IAAI;QACzB,CAAC;MACH;;MAEA;MACA,IAAI1B,KAAK,CAACkC,OAAO,EAAE;QACjB,MAAM;UACJV,OAAO,EAAE,yEAAyE;UAClFE,MAAM,EAAE;QACV,CAAC;MACH;;MAEA;MACA,MAAM;QACJF,OAAO,EAAExB,KAAK,CAACwB,OAAO,IAAI,8BAA8B;QACxDE,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMS,QAAQ,GAAG,MAAOxB,QAAQ,IAAK;IACnC,IAAI;MACFV,OAAO,CAACK,GAAG,CAAC,8BAA8B,EAAEK,QAAQ,CAACG,KAAK,CAAC;;MAE3D;MACA,MAAMP,QAAQ,GAAG,MAAM7B,GAAG,CAAC8B,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;MAC3DV,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAEC,QAAQ,CAAC;MAE/C,IAAI,CAACA,QAAQ,EAAE;QACbN,OAAO,CAACD,KAAK,CAAC,sDAAsD,CAAC;QACrE,MAAM,IAAIS,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAM;QAAEjB,KAAK;QAAEP;MAAK,CAAC,GAAGsB,QAAQ;MAEhC,IAAI,CAACf,KAAK,IAAI,CAACP,IAAI,EAAE;QACnBgB,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEO,QAAQ,CAAC;QACnE,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;MACjD;;MAEA;MACAhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCd,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;;MAEhE;MACA,MAAM4C,kBAAkB,GAAG;QACzBxB,EAAE,EAAE3B,IAAI,CAAC2B,EAAE,IAAI3B,IAAI,CAAC4B,GAAG;QACvBC,KAAK,EAAE7B,IAAI,CAAC6B,KAAK;QACjBC,SAAS,EAAE9B,IAAI,CAAC8B,SAAS;QACzBC,QAAQ,EAAE/B,IAAI,CAAC+B,QAAQ;QACvBC,KAAK,EAAEhC,IAAI,CAACgC,KAAK;QACjBC,IAAI,EAAEjC,IAAI,CAACiC,IAAI,IAAI,MAAM;QACzBC,QAAQ,EAAElC,IAAI,CAACkC;MACjB,CAAC;MAEDlB,OAAO,CAACK,GAAG,CAAC,uCAAuC,EAAE8B,kBAAkB,CAAC;MACxElD,OAAO,CAACkD,kBAAkB,CAAC;MAC3B3D,KAAK,CAAC2C,OAAO,CAAC,mCAAmC,CAAC;;MAElD;MACA,MAAMiB,UAAU,GAAGD,kBAAkB,CAAClB,IAAI,KAAK,OAAO,GAAG,kBAAkB,GAAG,YAAY;MAC1F7B,QAAQ,CAACgD,UAAU,EAAE;QAAEhB,OAAO,EAAE;MAAK,CAAC,CAAC;MAEvC,OAAO;QAAED,OAAO,EAAE,IAAI;QAAEnC,IAAI,EAAEmD;MAAmB,CAAC;IAEpD,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA,IAAAsC,gBAAA,EAAAC,gBAAA;MACdtC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAE;QACnCwB,OAAO,EAAExB,KAAK,CAACwB,OAAO;QACtBjB,QAAQ,GAAA+B,gBAAA,GAAEtC,KAAK,CAACO,QAAQ,cAAA+B,gBAAA,uBAAdA,gBAAA,CAAgBxC,IAAI;QAC9B2B,MAAM,GAAAc,gBAAA,GAAEvC,KAAK,CAACO,QAAQ,cAAAgC,gBAAA,uBAAdA,gBAAA,CAAgBd;MAC1B,CAAC,CAAC;;MAEF;MACA,IAAIzB,KAAK,CAACO,QAAQ,EAAE;QAClB,MAAM;UAAEkB,MAAM;UAAE3B;QAAK,CAAC,GAAGE,KAAK,CAACO,QAAQ;;QAEvC;QACA,IAAIkB,MAAM,KAAK,GAAG,IAAI3B,IAAI,CAAC4B,MAAM,EAAE;UACjC,MAAMC,WAAW,GAAG7B,IAAI,CAAC4B,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,MAAM;YACpD,GAAGD,GAAG;YACN,CAACC,GAAG,CAACC,KAAK,IAAI,MAAM,GAAGD,GAAG,CAACE,GAAG,IAAI;UACpC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAEP,MAAM;YACJR,OAAO,EAAE1B,IAAI,CAAC0B,OAAO,IAAI,mBAAmB;YAC5CE,MAAM,EAAEC;UACV,CAAC;QACH;;QAEA;QACA,MAAM;UACJH,OAAO,EAAE1B,IAAI,CAAC0B,OAAO,IAAI,UAAUC,MAAM,MAAMzB,KAAK,CAACO,QAAQ,CAAC0B,UAAU,EAAE;UAC1EP,MAAM,EAAE5B,IAAI,CAAC4B,MAAM,IAAI;QACzB,CAAC;MACH;;MAEA;MACA,IAAI1B,KAAK,CAACkC,OAAO,EAAE;QACjB,MAAM;UACJV,OAAO,EAAE,yEAAyE;UAClFE,MAAM,EAAE;QACV,CAAC;MACH;;MAEA;MACA,MAAM;QACJF,OAAO,EAAExB,KAAK,CAACwB,OAAO,IAAI,kDAAkD;QAC5EE,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMc,MAAM,GAAGA,CAAA,KAAM;IACnB/C,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOxB,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACnDX,OAAO,CAAC,IAAI,CAAC;IACbT,KAAK,CAAC2C,OAAO,CAAC,0BAA0B,CAAC;IACzC/B,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMoD,aAAa,GAAG,MAAO9B,QAAQ,IAAK;IACxC,IAAI;MACF,MAAM;QAAEb;MAAK,CAAC,GAAG,MAAMpB,GAAG,CAACgE,GAAG,CAAC,UAAU,EAAE/B,QAAQ,CAAC;MACpDzB,OAAO,CAACY,IAAI,CAACb,IAAI,CAAC;MAClBR,KAAK,CAAC2C,OAAO,CAAC,+BAA+B,CAAC;MAC9C,OAAOtB,IAAI,CAACb,IAAI;IAClB,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA,IAAA2C,gBAAA,EAAAC,qBAAA;MACd,MAAMpB,OAAO,GAAG,EAAAmB,gBAAA,GAAA3C,KAAK,CAACO,QAAQ,cAAAoC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7C,IAAI,cAAA8C,qBAAA,uBAApBA,qBAAA,CAAsBpB,OAAO,KAAI,0BAA0B;MAC3E/C,KAAK,CAACuB,KAAK,CAACwB,OAAO,CAAC;MACpB,MAAMxB,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM6C,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEC,WAAW,KAAK;IAC7D,IAAI;MACF,MAAMrE,GAAG,CAACgE,GAAG,CAAC,uBAAuB,EAAE;QAAEI,eAAe;QAAEC;MAAY,CAAC,CAAC;MACxEtE,KAAK,CAAC2C,OAAO,CAAC,gCAAgC,CAAC;MAC/C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA,IAAAgD,gBAAA,EAAAC,qBAAA;MACd,MAAMzB,OAAO,GAAG,EAAAwB,gBAAA,GAAAhD,KAAK,CAACO,QAAQ,cAAAyC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBlD,IAAI,cAAAmD,qBAAA,uBAApBA,qBAAA,CAAsBzB,OAAO,KAAI,2BAA2B;MAC5E/C,KAAK,CAACuB,KAAK,CAACwB,OAAO,CAAC;MACpB,MAAMxB,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMkD,cAAc,GAAG,MAAOpC,KAAK,IAAK;IACtC,IAAI;MACF,MAAMpC,GAAG,CAAC8B,IAAI,CAAC,uBAAuB,EAAE;QAAEM;MAAM,CAAC,CAAC;MAClDrC,KAAK,CAAC2C,OAAO,CAAC,wCAAwC,CAAC;MACvD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA,IAAAmD,gBAAA,EAAAC,qBAAA;MACd,MAAM5B,OAAO,GAAG,EAAA2B,gBAAA,GAAAnD,KAAK,CAACO,QAAQ,cAAA4C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBrD,IAAI,cAAAsD,qBAAA,uBAApBA,qBAAA,CAAsB5B,OAAO,KAAI,4BAA4B;MAC7E/C,KAAK,CAACuB,KAAK,CAACwB,OAAO,CAAC;MACpB,MAAMxB,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMqD,aAAa,GAAG,MAAAA,CAAO7D,KAAK,EAAEuD,WAAW,KAAK;IAClD,IAAI;MACF,MAAMrE,GAAG,CAAC8B,IAAI,CAAC,wBAAwBhB,KAAK,EAAE,EAAE;QAAEuD;MAAY,CAAC,CAAC;MAChEtE,KAAK,CAAC2C,OAAO,CAAC,iEAAiE,CAAC;MAChF/B,QAAQ,CAAC,QAAQ,CAAC;MAClB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA,IAAAsD,gBAAA,EAAAC,qBAAA;MACd,MAAM/B,OAAO,GAAG,EAAA8B,gBAAA,GAAAtD,KAAK,CAACO,QAAQ,cAAA+C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxD,IAAI,cAAAyD,qBAAA,uBAApBA,qBAAA,CAAsB/B,OAAO,KAAI,0BAA0B;MAC3E/C,KAAK,CAACuB,KAAK,CAACwB,OAAO,CAAC;MACpB,MAAMxB,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMwD,OAAO,GAAItC,IAAI,IAAK;IACxB,IAAI,CAACjC,IAAI,EAAE,OAAO,KAAK;IACvB,OAAOA,IAAI,CAACiC,IAAI,KAAKA,IAAI;EAC3B,CAAC;;EAED;EACA,MAAMuC,UAAU,GAAIC,KAAK,IAAK;IAC5B,IAAI,CAACzE,IAAI,EAAE,OAAO,KAAK;IACvB,OAAOyE,KAAK,CAACC,QAAQ,CAAC1E,IAAI,CAACiC,IAAI,CAAC;EAClC,CAAC;EAED,MAAM0C,KAAK,GAAG;IACZ3E,IAAI;IACJE,OAAO;IACP0E,eAAe,EAAE,CAAC,CAAC5E,IAAI;IACvB6E,OAAO,EAAE,CAAA7E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,IAAI,MAAK,OAAO;IAC/Bf,KAAK;IACLgC,QAAQ;IACRK,MAAM;IACNC,aAAa;IACbI,cAAc;IACdK,cAAc;IACdG,aAAa;IACbG,OAAO;IACPC;EACF,CAAC;EAED,oBAAO7E,OAAA,CAACC,WAAW,CAACkF,QAAQ;IAACH,KAAK,EAAEA,KAAM;IAAA7E,QAAA,EAAEA;EAAQ;IAAAiF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACnF,EAAA,CA1TWF,YAAY;EAAA,QAGNP,WAAW,EACXC,WAAW;AAAA;AAAA4F,EAAA,GAJjBtF,YAAY;AA4TzB,OAAO,MAAMuF,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGlG,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAAC0F,OAAO,EAAE;IACZ,MAAM,IAAI9D,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAO8D,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAexF,WAAW;AAAC,IAAAuF,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}